// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: picomsDataTypes_KR23_proto3.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace KR23 {

  /// <summary>Holder for reflection information generated from picomsDataTypes_KR23_proto3.proto</summary>
  public static partial class PicomsDataTypesKR23Proto3Reflection {

    #region Descriptor
    /// <summary>File descriptor for picomsDataTypes_KR23_proto3.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PicomsDataTypesKR23Proto3Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFwaWNvbXNEYXRhVHlwZXNfS1IyM19wcm90bzMucHJvdG8SBEtSMjMi9QEK",
            "D1RocnVzdGVyQ29tbWFuZBIWCg50aHJ1c3Rlcl8wX1BXTRgBIAEoDRIWCg50",
            "aHJ1c3Rlcl8xX1BXTRgCIAEoDRIWCg50aHJ1c3Rlcl8yX1BXTRgDIAEoDRIW",
            "Cg50aHJ1c3Rlcl8zX1BXTRgEIAEoDRIWCg50aHJ1c3Rlcl80X1BXTRgFIAEo",
            "DRIWCg50aHJ1c3Rlcl81X1BXTRgGIAEoDRIWCg50aHJ1c3Rlcl82X1BXTRgH",
            "IAEoDRIWCg50aHJ1c3Rlcl83X1BXTRgIIAEoDRIiCgZyZXN1bHQYDiABKA4y",
            "Ei5LUjIzLktlbHBpZVJlc3VsdCK0AQoRQXR0YWNobWVudENvbW1hbmQSEwoL",
            "c2Vydm9fMF9QV00YASABKA0SEwoLc2Vydm9fMV9QV00YAiABKA0SEwoLc2Vy",
            "dm9fMl9QV00YAyABKA0SEQoJbGlnaHRfUFdNGAQgASgNEikKCmNsYXdfc3Rh",
            "dGUYBSABKA4yFS5LUjIzLktlbHBpZUNsYXdTdGF0ZRIiCgZyZXN1bHQYDiAB",
            "KA4yEi5LUjIzLktlbHBpZVJlc3VsdCKfAgoLU2Vuc29yc0RhdGESEwoLdGVt",
            "cGVyYXR1cmUYASABKAESEAoIaHVtaWRpdHkYAiABKAESEAoIcHJlc3N1cmUY",
            "AyABKAESDQoFZGVwdGgYBCABKAESFwoPYWNjZWxlcm9tZXRlcl94GAUgASgB",
            "EhcKD2FjY2VsZXJvbWV0ZXJfeRgGIAEoARIXCg9hY2NlbGVyb21ldGVyX3oY",
            "ByABKAESFwoPcXVhdGVybmlvbl9yZWFsGAggASgBEhQKDHF1YXRlcm5pb25f",
            "aRgJIAEoARIUCgxxdWF0ZXJuaW9uX2oYCiABKAESFAoMcXVhdGVybmlvbl9r",
            "GAsgASgBEiIKBnJlc3VsdBgOIAEoDjISLktSMjMuS2VscGllUmVzdWx0IpoC",
            "CgpTYWZldHlEYXRhEg8KB3Bvd2VyXzAYASABKAESDwoHcG93ZXJfMRgCIAEo",
            "ARIPCgdwb3dlcl8yGAMgASgBEg8KB3Bvd2VyXzMYBCABKAESEQoJY3VycmVu",
            "dF8wGAUgASgBEhEKCWN1cnJlbnRfMRgGIAEoARIRCgljdXJyZW50XzIYByAB",
            "KAESEQoJY3VycmVudF8zGAggASgBEhEKCXZvbHRhZ2VfMBgJIAEoARIRCgl2",
            "b2x0YWdlXzEYCiABKAESEQoJdm9sdGFnZV8yGAsgASgBEhEKCXZvbHRhZ2Vf",
            "MxgMIAEoARIMCgRsZWFrGA0gASgIEiIKBnJlc3VsdBgOIAEoDjISLktSMjMu",
            "S2VscGllUmVzdWx0ItcCCgtQb2xsTWVzc2FnZRIWCg50aHJ1c3Rlcl8wX1BX",
            "TRgBIAEoDRIWCg50aHJ1c3Rlcl8xX1BXTRgCIAEoDRIWCg50aHJ1c3Rlcl8y",
            "X1BXTRgDIAEoDRIWCg50aHJ1c3Rlcl8zX1BXTRgEIAEoDRIWCg50aHJ1c3Rl",
            "cl80X1BXTRgFIAEoDRIWCg50aHJ1c3Rlcl81X1BXTRgGIAEoDRIWCg50aHJ1",
            "c3Rlcl82X1BXTRgHIAEoDRIWCg50aHJ1c3Rlcl83X1BXTRgIIAEoDRITCgtz",
            "ZXJ2b18wX1BXTRgJIAEoDRITCgtzZXJ2b18xX1BXTRgKIAEoDRITCgtzZXJ2",
            "b18yX1BXTRgLIAEoDRIRCglsaWdodF9QV00YDCABKA0SEgoKY2xhd19zdGF0",
            "ZRgNIAEoDRIiCgZyZXN1bHQYDiABKA4yEi5LUjIzLktlbHBpZVJlc3VsdCJ1",
            "Cg9PdXRnb2luZ01lc3NhZ2USLgoPdGhydXN0ZXJDb21tYW5kGAEgASgLMhUu",
            "S1IyMy5UaHJ1c3RlckNvbW1hbmQSMgoRYXR0YWNobWVudENvbW1hbmQYAiAB",
            "KAsyFy5LUjIzLkF0dGFjaG1lbnRDb21tYW5kIocBCg9JbmNvbWluZ01lc3Nh",
            "Z2USJgoLc2Vuc29yc0RhdGEYASABKAsyES5LUjIzLlNlbnNvcnNEYXRhEiQK",
            "CnNhZmV0eURhdGEYAiABKAsyEC5LUjIzLlNhZmV0eURhdGESJgoLcG9sbE1l",
            "c3NhZ2UYAyABKAsyES5LUjIzLlBvbGxNZXNzYWdlKoEBCgxLZWxwaWVSZXN1",
            "bHQSBgoCT0sQABINCglFUlJPUl9JMkMQARIOCgpFUlJPUl9VQVJUEAISEQoN",
            "RVJST1JfTkVUV09SSxADEhMKD0VSUk9SX1BJTl9FUlJPUhAEEhUKEUVSUk9S",
            "X1ZBTFVFX0VSUk9SEAUSCwoHV0FSTklORxAGKjAKD0tlbHBpZUNsYXdTdGF0",
            "ZRIICgRJRExFEAASCQoFQ0xPU0UQARIICgRPUEVOEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::KR23.KelpieResult), typeof(global::KR23.KelpieClawState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::KR23.ThrusterCommand), global::KR23.ThrusterCommand.Parser, new[]{ "Thruster0PWM", "Thruster1PWM", "Thruster2PWM", "Thruster3PWM", "Thruster4PWM", "Thruster5PWM", "Thruster6PWM", "Thruster7PWM", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KR23.AttachmentCommand), global::KR23.AttachmentCommand.Parser, new[]{ "Servo0PWM", "Servo1PWM", "Servo2PWM", "LightPWM", "ClawState", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KR23.SensorsData), global::KR23.SensorsData.Parser, new[]{ "Temperature", "Humidity", "Pressure", "Depth", "AccelerometerX", "AccelerometerY", "AccelerometerZ", "QuaternionReal", "QuaternionI", "QuaternionJ", "QuaternionK", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KR23.SafetyData), global::KR23.SafetyData.Parser, new[]{ "Power0", "Power1", "Power2", "Power3", "Current0", "Current1", "Current2", "Current3", "Voltage0", "Voltage1", "Voltage2", "Voltage3", "Leak", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KR23.PollMessage), global::KR23.PollMessage.Parser, new[]{ "Thruster0PWM", "Thruster1PWM", "Thruster2PWM", "Thruster3PWM", "Thruster4PWM", "Thruster5PWM", "Thruster6PWM", "Thruster7PWM", "Servo0PWM", "Servo1PWM", "Servo2PWM", "LightPWM", "ClawState", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KR23.OutgoingMessage), global::KR23.OutgoingMessage.Parser, new[]{ "ThrusterCommand", "AttachmentCommand" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KR23.IncomingMessage), global::KR23.IncomingMessage.Parser, new[]{ "SensorsData", "SafetyData", "PollMessage" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum KelpieResult {
    [pbr::OriginalName("OK")] Ok = 0,
    [pbr::OriginalName("ERROR_I2C")] ErrorI2C = 1,
    [pbr::OriginalName("ERROR_UART")] ErrorUart = 2,
    [pbr::OriginalName("ERROR_NETWORK")] ErrorNetwork = 3,
    [pbr::OriginalName("ERROR_PIN_ERROR")] ErrorPinError = 4,
    [pbr::OriginalName("ERROR_VALUE_ERROR")] ErrorValueError = 5,
    [pbr::OriginalName("WARNING")] Warning = 6,
  }

  public enum KelpieClawState {
    [pbr::OriginalName("IDLE")] Idle = 0,
    [pbr::OriginalName("CLOSE")] Close = 1,
    [pbr::OriginalName("OPEN")] Open = 2,
  }

  #endregion

  #region Messages
  public sealed partial class ThrusterCommand : pb::IMessage<ThrusterCommand> {
    private static readonly pb::MessageParser<ThrusterCommand> _parser = new pb::MessageParser<ThrusterCommand>(() => new ThrusterCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThrusterCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KR23.PicomsDataTypesKR23Proto3Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrusterCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrusterCommand(ThrusterCommand other) : this() {
      thruster0PWM_ = other.thruster0PWM_;
      thruster1PWM_ = other.thruster1PWM_;
      thruster2PWM_ = other.thruster2PWM_;
      thruster3PWM_ = other.thruster3PWM_;
      thruster4PWM_ = other.thruster4PWM_;
      thruster5PWM_ = other.thruster5PWM_;
      thruster6PWM_ = other.thruster6PWM_;
      thruster7PWM_ = other.thruster7PWM_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThrusterCommand Clone() {
      return new ThrusterCommand(this);
    }

    /// <summary>Field number for the "thruster_0_PWM" field.</summary>
    public const int Thruster0PWMFieldNumber = 1;
    private uint thruster0PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster0PWM {
      get { return thruster0PWM_; }
      set {
        thruster0PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_1_PWM" field.</summary>
    public const int Thruster1PWMFieldNumber = 2;
    private uint thruster1PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster1PWM {
      get { return thruster1PWM_; }
      set {
        thruster1PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_2_PWM" field.</summary>
    public const int Thruster2PWMFieldNumber = 3;
    private uint thruster2PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster2PWM {
      get { return thruster2PWM_; }
      set {
        thruster2PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_3_PWM" field.</summary>
    public const int Thruster3PWMFieldNumber = 4;
    private uint thruster3PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster3PWM {
      get { return thruster3PWM_; }
      set {
        thruster3PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_4_PWM" field.</summary>
    public const int Thruster4PWMFieldNumber = 5;
    private uint thruster4PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster4PWM {
      get { return thruster4PWM_; }
      set {
        thruster4PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_5_PWM" field.</summary>
    public const int Thruster5PWMFieldNumber = 6;
    private uint thruster5PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster5PWM {
      get { return thruster5PWM_; }
      set {
        thruster5PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_6_PWM" field.</summary>
    public const int Thruster6PWMFieldNumber = 7;
    private uint thruster6PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster6PWM {
      get { return thruster6PWM_; }
      set {
        thruster6PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_7_PWM" field.</summary>
    public const int Thruster7PWMFieldNumber = 8;
    private uint thruster7PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster7PWM {
      get { return thruster7PWM_; }
      set {
        thruster7PWM_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 14;
    private global::KR23.KelpieResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.KelpieResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThrusterCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThrusterCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Thruster0PWM != other.Thruster0PWM) return false;
      if (Thruster1PWM != other.Thruster1PWM) return false;
      if (Thruster2PWM != other.Thruster2PWM) return false;
      if (Thruster3PWM != other.Thruster3PWM) return false;
      if (Thruster4PWM != other.Thruster4PWM) return false;
      if (Thruster5PWM != other.Thruster5PWM) return false;
      if (Thruster6PWM != other.Thruster6PWM) return false;
      if (Thruster7PWM != other.Thruster7PWM) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Thruster0PWM != 0) hash ^= Thruster0PWM.GetHashCode();
      if (Thruster1PWM != 0) hash ^= Thruster1PWM.GetHashCode();
      if (Thruster2PWM != 0) hash ^= Thruster2PWM.GetHashCode();
      if (Thruster3PWM != 0) hash ^= Thruster3PWM.GetHashCode();
      if (Thruster4PWM != 0) hash ^= Thruster4PWM.GetHashCode();
      if (Thruster5PWM != 0) hash ^= Thruster5PWM.GetHashCode();
      if (Thruster6PWM != 0) hash ^= Thruster6PWM.GetHashCode();
      if (Thruster7PWM != 0) hash ^= Thruster7PWM.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Thruster0PWM != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Thruster0PWM);
      }
      if (Thruster1PWM != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Thruster1PWM);
      }
      if (Thruster2PWM != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Thruster2PWM);
      }
      if (Thruster3PWM != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Thruster3PWM);
      }
      if (Thruster4PWM != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Thruster4PWM);
      }
      if (Thruster5PWM != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Thruster5PWM);
      }
      if (Thruster6PWM != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Thruster6PWM);
      }
      if (Thruster7PWM != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Thruster7PWM);
      }
      if (Result != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Thruster0PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster0PWM);
      }
      if (Thruster1PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster1PWM);
      }
      if (Thruster2PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster2PWM);
      }
      if (Thruster3PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster3PWM);
      }
      if (Thruster4PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster4PWM);
      }
      if (Thruster5PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster5PWM);
      }
      if (Thruster6PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster6PWM);
      }
      if (Thruster7PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster7PWM);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThrusterCommand other) {
      if (other == null) {
        return;
      }
      if (other.Thruster0PWM != 0) {
        Thruster0PWM = other.Thruster0PWM;
      }
      if (other.Thruster1PWM != 0) {
        Thruster1PWM = other.Thruster1PWM;
      }
      if (other.Thruster2PWM != 0) {
        Thruster2PWM = other.Thruster2PWM;
      }
      if (other.Thruster3PWM != 0) {
        Thruster3PWM = other.Thruster3PWM;
      }
      if (other.Thruster4PWM != 0) {
        Thruster4PWM = other.Thruster4PWM;
      }
      if (other.Thruster5PWM != 0) {
        Thruster5PWM = other.Thruster5PWM;
      }
      if (other.Thruster6PWM != 0) {
        Thruster6PWM = other.Thruster6PWM;
      }
      if (other.Thruster7PWM != 0) {
        Thruster7PWM = other.Thruster7PWM;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Thruster0PWM = input.ReadUInt32();
            break;
          }
          case 16: {
            Thruster1PWM = input.ReadUInt32();
            break;
          }
          case 24: {
            Thruster2PWM = input.ReadUInt32();
            break;
          }
          case 32: {
            Thruster3PWM = input.ReadUInt32();
            break;
          }
          case 40: {
            Thruster4PWM = input.ReadUInt32();
            break;
          }
          case 48: {
            Thruster5PWM = input.ReadUInt32();
            break;
          }
          case 56: {
            Thruster6PWM = input.ReadUInt32();
            break;
          }
          case 64: {
            Thruster7PWM = input.ReadUInt32();
            break;
          }
          case 112: {
            result_ = (global::KR23.KelpieResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttachmentCommand : pb::IMessage<AttachmentCommand> {
    private static readonly pb::MessageParser<AttachmentCommand> _parser = new pb::MessageParser<AttachmentCommand>(() => new AttachmentCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachmentCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KR23.PicomsDataTypesKR23Proto3Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentCommand(AttachmentCommand other) : this() {
      servo0PWM_ = other.servo0PWM_;
      servo1PWM_ = other.servo1PWM_;
      servo2PWM_ = other.servo2PWM_;
      lightPWM_ = other.lightPWM_;
      clawState_ = other.clawState_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachmentCommand Clone() {
      return new AttachmentCommand(this);
    }

    /// <summary>Field number for the "servo_0_PWM" field.</summary>
    public const int Servo0PWMFieldNumber = 1;
    private uint servo0PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Servo0PWM {
      get { return servo0PWM_; }
      set {
        servo0PWM_ = value;
      }
    }

    /// <summary>Field number for the "servo_1_PWM" field.</summary>
    public const int Servo1PWMFieldNumber = 2;
    private uint servo1PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Servo1PWM {
      get { return servo1PWM_; }
      set {
        servo1PWM_ = value;
      }
    }

    /// <summary>Field number for the "servo_2_PWM" field.</summary>
    public const int Servo2PWMFieldNumber = 3;
    private uint servo2PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Servo2PWM {
      get { return servo2PWM_; }
      set {
        servo2PWM_ = value;
      }
    }

    /// <summary>Field number for the "light_PWM" field.</summary>
    public const int LightPWMFieldNumber = 4;
    private uint lightPWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LightPWM {
      get { return lightPWM_; }
      set {
        lightPWM_ = value;
      }
    }

    /// <summary>Field number for the "claw_state" field.</summary>
    public const int ClawStateFieldNumber = 5;
    private global::KR23.KelpieClawState clawState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.KelpieClawState ClawState {
      get { return clawState_; }
      set {
        clawState_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 14;
    private global::KR23.KelpieResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.KelpieResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachmentCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachmentCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Servo0PWM != other.Servo0PWM) return false;
      if (Servo1PWM != other.Servo1PWM) return false;
      if (Servo2PWM != other.Servo2PWM) return false;
      if (LightPWM != other.LightPWM) return false;
      if (ClawState != other.ClawState) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Servo0PWM != 0) hash ^= Servo0PWM.GetHashCode();
      if (Servo1PWM != 0) hash ^= Servo1PWM.GetHashCode();
      if (Servo2PWM != 0) hash ^= Servo2PWM.GetHashCode();
      if (LightPWM != 0) hash ^= LightPWM.GetHashCode();
      if (ClawState != 0) hash ^= ClawState.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Servo0PWM != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Servo0PWM);
      }
      if (Servo1PWM != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Servo1PWM);
      }
      if (Servo2PWM != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Servo2PWM);
      }
      if (LightPWM != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LightPWM);
      }
      if (ClawState != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ClawState);
      }
      if (Result != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Servo0PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Servo0PWM);
      }
      if (Servo1PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Servo1PWM);
      }
      if (Servo2PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Servo2PWM);
      }
      if (LightPWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LightPWM);
      }
      if (ClawState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClawState);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachmentCommand other) {
      if (other == null) {
        return;
      }
      if (other.Servo0PWM != 0) {
        Servo0PWM = other.Servo0PWM;
      }
      if (other.Servo1PWM != 0) {
        Servo1PWM = other.Servo1PWM;
      }
      if (other.Servo2PWM != 0) {
        Servo2PWM = other.Servo2PWM;
      }
      if (other.LightPWM != 0) {
        LightPWM = other.LightPWM;
      }
      if (other.ClawState != 0) {
        ClawState = other.ClawState;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Servo0PWM = input.ReadUInt32();
            break;
          }
          case 16: {
            Servo1PWM = input.ReadUInt32();
            break;
          }
          case 24: {
            Servo2PWM = input.ReadUInt32();
            break;
          }
          case 32: {
            LightPWM = input.ReadUInt32();
            break;
          }
          case 40: {
            clawState_ = (global::KR23.KelpieClawState) input.ReadEnum();
            break;
          }
          case 112: {
            result_ = (global::KR23.KelpieResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SensorsData : pb::IMessage<SensorsData> {
    private static readonly pb::MessageParser<SensorsData> _parser = new pb::MessageParser<SensorsData>(() => new SensorsData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SensorsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KR23.PicomsDataTypesKR23Proto3Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorsData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorsData(SensorsData other) : this() {
      temperature_ = other.temperature_;
      humidity_ = other.humidity_;
      pressure_ = other.pressure_;
      depth_ = other.depth_;
      accelerometerX_ = other.accelerometerX_;
      accelerometerY_ = other.accelerometerY_;
      accelerometerZ_ = other.accelerometerZ_;
      quaternionReal_ = other.quaternionReal_;
      quaternionI_ = other.quaternionI_;
      quaternionJ_ = other.quaternionJ_;
      quaternionK_ = other.quaternionK_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorsData Clone() {
      return new SensorsData(this);
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 1;
    private double temperature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "humidity" field.</summary>
    public const int HumidityFieldNumber = 2;
    private double humidity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Humidity {
      get { return humidity_; }
      set {
        humidity_ = value;
      }
    }

    /// <summary>Field number for the "pressure" field.</summary>
    public const int PressureFieldNumber = 3;
    private double pressure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pressure {
      get { return pressure_; }
      set {
        pressure_ = value;
      }
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 4;
    private double depth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Depth {
      get { return depth_; }
      set {
        depth_ = value;
      }
    }

    /// <summary>Field number for the "accelerometer_x" field.</summary>
    public const int AccelerometerXFieldNumber = 5;
    private double accelerometerX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerometerX {
      get { return accelerometerX_; }
      set {
        accelerometerX_ = value;
      }
    }

    /// <summary>Field number for the "accelerometer_y" field.</summary>
    public const int AccelerometerYFieldNumber = 6;
    private double accelerometerY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerometerY {
      get { return accelerometerY_; }
      set {
        accelerometerY_ = value;
      }
    }

    /// <summary>Field number for the "accelerometer_z" field.</summary>
    public const int AccelerometerZFieldNumber = 7;
    private double accelerometerZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AccelerometerZ {
      get { return accelerometerZ_; }
      set {
        accelerometerZ_ = value;
      }
    }

    /// <summary>Field number for the "quaternion_real" field.</summary>
    public const int QuaternionRealFieldNumber = 8;
    private double quaternionReal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double QuaternionReal {
      get { return quaternionReal_; }
      set {
        quaternionReal_ = value;
      }
    }

    /// <summary>Field number for the "quaternion_i" field.</summary>
    public const int QuaternionIFieldNumber = 9;
    private double quaternionI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double QuaternionI {
      get { return quaternionI_; }
      set {
        quaternionI_ = value;
      }
    }

    /// <summary>Field number for the "quaternion_j" field.</summary>
    public const int QuaternionJFieldNumber = 10;
    private double quaternionJ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double QuaternionJ {
      get { return quaternionJ_; }
      set {
        quaternionJ_ = value;
      }
    }

    /// <summary>Field number for the "quaternion_k" field.</summary>
    public const int QuaternionKFieldNumber = 11;
    private double quaternionK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double QuaternionK {
      get { return quaternionK_; }
      set {
        quaternionK_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 14;
    private global::KR23.KelpieResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.KelpieResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SensorsData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SensorsData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Temperature != other.Temperature) return false;
      if (Humidity != other.Humidity) return false;
      if (Pressure != other.Pressure) return false;
      if (Depth != other.Depth) return false;
      if (AccelerometerX != other.AccelerometerX) return false;
      if (AccelerometerY != other.AccelerometerY) return false;
      if (AccelerometerZ != other.AccelerometerZ) return false;
      if (QuaternionReal != other.QuaternionReal) return false;
      if (QuaternionI != other.QuaternionI) return false;
      if (QuaternionJ != other.QuaternionJ) return false;
      if (QuaternionK != other.QuaternionK) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Temperature != 0D) hash ^= Temperature.GetHashCode();
      if (Humidity != 0D) hash ^= Humidity.GetHashCode();
      if (Pressure != 0D) hash ^= Pressure.GetHashCode();
      if (Depth != 0D) hash ^= Depth.GetHashCode();
      if (AccelerometerX != 0D) hash ^= AccelerometerX.GetHashCode();
      if (AccelerometerY != 0D) hash ^= AccelerometerY.GetHashCode();
      if (AccelerometerZ != 0D) hash ^= AccelerometerZ.GetHashCode();
      if (QuaternionReal != 0D) hash ^= QuaternionReal.GetHashCode();
      if (QuaternionI != 0D) hash ^= QuaternionI.GetHashCode();
      if (QuaternionJ != 0D) hash ^= QuaternionJ.GetHashCode();
      if (QuaternionK != 0D) hash ^= QuaternionK.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Temperature != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Temperature);
      }
      if (Humidity != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Humidity);
      }
      if (Pressure != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Pressure);
      }
      if (Depth != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Depth);
      }
      if (AccelerometerX != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(AccelerometerX);
      }
      if (AccelerometerY != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(AccelerometerY);
      }
      if (AccelerometerZ != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(AccelerometerZ);
      }
      if (QuaternionReal != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(QuaternionReal);
      }
      if (QuaternionI != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(QuaternionI);
      }
      if (QuaternionJ != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(QuaternionJ);
      }
      if (QuaternionK != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(QuaternionK);
      }
      if (Result != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Temperature != 0D) {
        size += 1 + 8;
      }
      if (Humidity != 0D) {
        size += 1 + 8;
      }
      if (Pressure != 0D) {
        size += 1 + 8;
      }
      if (Depth != 0D) {
        size += 1 + 8;
      }
      if (AccelerometerX != 0D) {
        size += 1 + 8;
      }
      if (AccelerometerY != 0D) {
        size += 1 + 8;
      }
      if (AccelerometerZ != 0D) {
        size += 1 + 8;
      }
      if (QuaternionReal != 0D) {
        size += 1 + 8;
      }
      if (QuaternionI != 0D) {
        size += 1 + 8;
      }
      if (QuaternionJ != 0D) {
        size += 1 + 8;
      }
      if (QuaternionK != 0D) {
        size += 1 + 8;
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SensorsData other) {
      if (other == null) {
        return;
      }
      if (other.Temperature != 0D) {
        Temperature = other.Temperature;
      }
      if (other.Humidity != 0D) {
        Humidity = other.Humidity;
      }
      if (other.Pressure != 0D) {
        Pressure = other.Pressure;
      }
      if (other.Depth != 0D) {
        Depth = other.Depth;
      }
      if (other.AccelerometerX != 0D) {
        AccelerometerX = other.AccelerometerX;
      }
      if (other.AccelerometerY != 0D) {
        AccelerometerY = other.AccelerometerY;
      }
      if (other.AccelerometerZ != 0D) {
        AccelerometerZ = other.AccelerometerZ;
      }
      if (other.QuaternionReal != 0D) {
        QuaternionReal = other.QuaternionReal;
      }
      if (other.QuaternionI != 0D) {
        QuaternionI = other.QuaternionI;
      }
      if (other.QuaternionJ != 0D) {
        QuaternionJ = other.QuaternionJ;
      }
      if (other.QuaternionK != 0D) {
        QuaternionK = other.QuaternionK;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Temperature = input.ReadDouble();
            break;
          }
          case 17: {
            Humidity = input.ReadDouble();
            break;
          }
          case 25: {
            Pressure = input.ReadDouble();
            break;
          }
          case 33: {
            Depth = input.ReadDouble();
            break;
          }
          case 41: {
            AccelerometerX = input.ReadDouble();
            break;
          }
          case 49: {
            AccelerometerY = input.ReadDouble();
            break;
          }
          case 57: {
            AccelerometerZ = input.ReadDouble();
            break;
          }
          case 65: {
            QuaternionReal = input.ReadDouble();
            break;
          }
          case 73: {
            QuaternionI = input.ReadDouble();
            break;
          }
          case 81: {
            QuaternionJ = input.ReadDouble();
            break;
          }
          case 89: {
            QuaternionK = input.ReadDouble();
            break;
          }
          case 112: {
            result_ = (global::KR23.KelpieResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SafetyData : pb::IMessage<SafetyData> {
    private static readonly pb::MessageParser<SafetyData> _parser = new pb::MessageParser<SafetyData>(() => new SafetyData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SafetyData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KR23.PicomsDataTypesKR23Proto3Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SafetyData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SafetyData(SafetyData other) : this() {
      power0_ = other.power0_;
      power1_ = other.power1_;
      power2_ = other.power2_;
      power3_ = other.power3_;
      current0_ = other.current0_;
      current1_ = other.current1_;
      current2_ = other.current2_;
      current3_ = other.current3_;
      voltage0_ = other.voltage0_;
      voltage1_ = other.voltage1_;
      voltage2_ = other.voltage2_;
      voltage3_ = other.voltage3_;
      leak_ = other.leak_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SafetyData Clone() {
      return new SafetyData(this);
    }

    /// <summary>Field number for the "power_0" field.</summary>
    public const int Power0FieldNumber = 1;
    private double power0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Power0 {
      get { return power0_; }
      set {
        power0_ = value;
      }
    }

    /// <summary>Field number for the "power_1" field.</summary>
    public const int Power1FieldNumber = 2;
    private double power1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Power1 {
      get { return power1_; }
      set {
        power1_ = value;
      }
    }

    /// <summary>Field number for the "power_2" field.</summary>
    public const int Power2FieldNumber = 3;
    private double power2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Power2 {
      get { return power2_; }
      set {
        power2_ = value;
      }
    }

    /// <summary>Field number for the "power_3" field.</summary>
    public const int Power3FieldNumber = 4;
    private double power3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Power3 {
      get { return power3_; }
      set {
        power3_ = value;
      }
    }

    /// <summary>Field number for the "current_0" field.</summary>
    public const int Current0FieldNumber = 5;
    private double current0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Current0 {
      get { return current0_; }
      set {
        current0_ = value;
      }
    }

    /// <summary>Field number for the "current_1" field.</summary>
    public const int Current1FieldNumber = 6;
    private double current1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Current1 {
      get { return current1_; }
      set {
        current1_ = value;
      }
    }

    /// <summary>Field number for the "current_2" field.</summary>
    public const int Current2FieldNumber = 7;
    private double current2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Current2 {
      get { return current2_; }
      set {
        current2_ = value;
      }
    }

    /// <summary>Field number for the "current_3" field.</summary>
    public const int Current3FieldNumber = 8;
    private double current3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Current3 {
      get { return current3_; }
      set {
        current3_ = value;
      }
    }

    /// <summary>Field number for the "voltage_0" field.</summary>
    public const int Voltage0FieldNumber = 9;
    private double voltage0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Voltage0 {
      get { return voltage0_; }
      set {
        voltage0_ = value;
      }
    }

    /// <summary>Field number for the "voltage_1" field.</summary>
    public const int Voltage1FieldNumber = 10;
    private double voltage1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Voltage1 {
      get { return voltage1_; }
      set {
        voltage1_ = value;
      }
    }

    /// <summary>Field number for the "voltage_2" field.</summary>
    public const int Voltage2FieldNumber = 11;
    private double voltage2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Voltage2 {
      get { return voltage2_; }
      set {
        voltage2_ = value;
      }
    }

    /// <summary>Field number for the "voltage_3" field.</summary>
    public const int Voltage3FieldNumber = 12;
    private double voltage3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Voltage3 {
      get { return voltage3_; }
      set {
        voltage3_ = value;
      }
    }

    /// <summary>Field number for the "leak" field.</summary>
    public const int LeakFieldNumber = 13;
    private bool leak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Leak {
      get { return leak_; }
      set {
        leak_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 14;
    private global::KR23.KelpieResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.KelpieResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SafetyData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SafetyData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Power0 != other.Power0) return false;
      if (Power1 != other.Power1) return false;
      if (Power2 != other.Power2) return false;
      if (Power3 != other.Power3) return false;
      if (Current0 != other.Current0) return false;
      if (Current1 != other.Current1) return false;
      if (Current2 != other.Current2) return false;
      if (Current3 != other.Current3) return false;
      if (Voltage0 != other.Voltage0) return false;
      if (Voltage1 != other.Voltage1) return false;
      if (Voltage2 != other.Voltage2) return false;
      if (Voltage3 != other.Voltage3) return false;
      if (Leak != other.Leak) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Power0 != 0D) hash ^= Power0.GetHashCode();
      if (Power1 != 0D) hash ^= Power1.GetHashCode();
      if (Power2 != 0D) hash ^= Power2.GetHashCode();
      if (Power3 != 0D) hash ^= Power3.GetHashCode();
      if (Current0 != 0D) hash ^= Current0.GetHashCode();
      if (Current1 != 0D) hash ^= Current1.GetHashCode();
      if (Current2 != 0D) hash ^= Current2.GetHashCode();
      if (Current3 != 0D) hash ^= Current3.GetHashCode();
      if (Voltage0 != 0D) hash ^= Voltage0.GetHashCode();
      if (Voltage1 != 0D) hash ^= Voltage1.GetHashCode();
      if (Voltage2 != 0D) hash ^= Voltage2.GetHashCode();
      if (Voltage3 != 0D) hash ^= Voltage3.GetHashCode();
      if (Leak != false) hash ^= Leak.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Power0 != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Power0);
      }
      if (Power1 != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Power1);
      }
      if (Power2 != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Power2);
      }
      if (Power3 != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Power3);
      }
      if (Current0 != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Current0);
      }
      if (Current1 != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Current1);
      }
      if (Current2 != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Current2);
      }
      if (Current3 != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Current3);
      }
      if (Voltage0 != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Voltage0);
      }
      if (Voltage1 != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Voltage1);
      }
      if (Voltage2 != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Voltage2);
      }
      if (Voltage3 != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Voltage3);
      }
      if (Leak != false) {
        output.WriteRawTag(104);
        output.WriteBool(Leak);
      }
      if (Result != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Power0 != 0D) {
        size += 1 + 8;
      }
      if (Power1 != 0D) {
        size += 1 + 8;
      }
      if (Power2 != 0D) {
        size += 1 + 8;
      }
      if (Power3 != 0D) {
        size += 1 + 8;
      }
      if (Current0 != 0D) {
        size += 1 + 8;
      }
      if (Current1 != 0D) {
        size += 1 + 8;
      }
      if (Current2 != 0D) {
        size += 1 + 8;
      }
      if (Current3 != 0D) {
        size += 1 + 8;
      }
      if (Voltage0 != 0D) {
        size += 1 + 8;
      }
      if (Voltage1 != 0D) {
        size += 1 + 8;
      }
      if (Voltage2 != 0D) {
        size += 1 + 8;
      }
      if (Voltage3 != 0D) {
        size += 1 + 8;
      }
      if (Leak != false) {
        size += 1 + 1;
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SafetyData other) {
      if (other == null) {
        return;
      }
      if (other.Power0 != 0D) {
        Power0 = other.Power0;
      }
      if (other.Power1 != 0D) {
        Power1 = other.Power1;
      }
      if (other.Power2 != 0D) {
        Power2 = other.Power2;
      }
      if (other.Power3 != 0D) {
        Power3 = other.Power3;
      }
      if (other.Current0 != 0D) {
        Current0 = other.Current0;
      }
      if (other.Current1 != 0D) {
        Current1 = other.Current1;
      }
      if (other.Current2 != 0D) {
        Current2 = other.Current2;
      }
      if (other.Current3 != 0D) {
        Current3 = other.Current3;
      }
      if (other.Voltage0 != 0D) {
        Voltage0 = other.Voltage0;
      }
      if (other.Voltage1 != 0D) {
        Voltage1 = other.Voltage1;
      }
      if (other.Voltage2 != 0D) {
        Voltage2 = other.Voltage2;
      }
      if (other.Voltage3 != 0D) {
        Voltage3 = other.Voltage3;
      }
      if (other.Leak != false) {
        Leak = other.Leak;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Power0 = input.ReadDouble();
            break;
          }
          case 17: {
            Power1 = input.ReadDouble();
            break;
          }
          case 25: {
            Power2 = input.ReadDouble();
            break;
          }
          case 33: {
            Power3 = input.ReadDouble();
            break;
          }
          case 41: {
            Current0 = input.ReadDouble();
            break;
          }
          case 49: {
            Current1 = input.ReadDouble();
            break;
          }
          case 57: {
            Current2 = input.ReadDouble();
            break;
          }
          case 65: {
            Current3 = input.ReadDouble();
            break;
          }
          case 73: {
            Voltage0 = input.ReadDouble();
            break;
          }
          case 81: {
            Voltage1 = input.ReadDouble();
            break;
          }
          case 89: {
            Voltage2 = input.ReadDouble();
            break;
          }
          case 97: {
            Voltage3 = input.ReadDouble();
            break;
          }
          case 104: {
            Leak = input.ReadBool();
            break;
          }
          case 112: {
            result_ = (global::KR23.KelpieResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PollMessage : pb::IMessage<PollMessage> {
    private static readonly pb::MessageParser<PollMessage> _parser = new pb::MessageParser<PollMessage>(() => new PollMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PollMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KR23.PicomsDataTypesKR23Proto3Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollMessage(PollMessage other) : this() {
      thruster0PWM_ = other.thruster0PWM_;
      thruster1PWM_ = other.thruster1PWM_;
      thruster2PWM_ = other.thruster2PWM_;
      thruster3PWM_ = other.thruster3PWM_;
      thruster4PWM_ = other.thruster4PWM_;
      thruster5PWM_ = other.thruster5PWM_;
      thruster6PWM_ = other.thruster6PWM_;
      thruster7PWM_ = other.thruster7PWM_;
      servo0PWM_ = other.servo0PWM_;
      servo1PWM_ = other.servo1PWM_;
      servo2PWM_ = other.servo2PWM_;
      lightPWM_ = other.lightPWM_;
      clawState_ = other.clawState_;
      result_ = other.result_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PollMessage Clone() {
      return new PollMessage(this);
    }

    /// <summary>Field number for the "thruster_0_PWM" field.</summary>
    public const int Thruster0PWMFieldNumber = 1;
    private uint thruster0PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster0PWM {
      get { return thruster0PWM_; }
      set {
        thruster0PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_1_PWM" field.</summary>
    public const int Thruster1PWMFieldNumber = 2;
    private uint thruster1PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster1PWM {
      get { return thruster1PWM_; }
      set {
        thruster1PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_2_PWM" field.</summary>
    public const int Thruster2PWMFieldNumber = 3;
    private uint thruster2PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster2PWM {
      get { return thruster2PWM_; }
      set {
        thruster2PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_3_PWM" field.</summary>
    public const int Thruster3PWMFieldNumber = 4;
    private uint thruster3PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster3PWM {
      get { return thruster3PWM_; }
      set {
        thruster3PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_4_PWM" field.</summary>
    public const int Thruster4PWMFieldNumber = 5;
    private uint thruster4PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster4PWM {
      get { return thruster4PWM_; }
      set {
        thruster4PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_5_PWM" field.</summary>
    public const int Thruster5PWMFieldNumber = 6;
    private uint thruster5PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster5PWM {
      get { return thruster5PWM_; }
      set {
        thruster5PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_6_PWM" field.</summary>
    public const int Thruster6PWMFieldNumber = 7;
    private uint thruster6PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster6PWM {
      get { return thruster6PWM_; }
      set {
        thruster6PWM_ = value;
      }
    }

    /// <summary>Field number for the "thruster_7_PWM" field.</summary>
    public const int Thruster7PWMFieldNumber = 8;
    private uint thruster7PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Thruster7PWM {
      get { return thruster7PWM_; }
      set {
        thruster7PWM_ = value;
      }
    }

    /// <summary>Field number for the "servo_0_PWM" field.</summary>
    public const int Servo0PWMFieldNumber = 9;
    private uint servo0PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Servo0PWM {
      get { return servo0PWM_; }
      set {
        servo0PWM_ = value;
      }
    }

    /// <summary>Field number for the "servo_1_PWM" field.</summary>
    public const int Servo1PWMFieldNumber = 10;
    private uint servo1PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Servo1PWM {
      get { return servo1PWM_; }
      set {
        servo1PWM_ = value;
      }
    }

    /// <summary>Field number for the "servo_2_PWM" field.</summary>
    public const int Servo2PWMFieldNumber = 11;
    private uint servo2PWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Servo2PWM {
      get { return servo2PWM_; }
      set {
        servo2PWM_ = value;
      }
    }

    /// <summary>Field number for the "light_PWM" field.</summary>
    public const int LightPWMFieldNumber = 12;
    private uint lightPWM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LightPWM {
      get { return lightPWM_; }
      set {
        lightPWM_ = value;
      }
    }

    /// <summary>Field number for the "claw_state" field.</summary>
    public const int ClawStateFieldNumber = 13;
    private uint clawState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClawState {
      get { return clawState_; }
      set {
        clawState_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 14;
    private global::KR23.KelpieResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.KelpieResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PollMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PollMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Thruster0PWM != other.Thruster0PWM) return false;
      if (Thruster1PWM != other.Thruster1PWM) return false;
      if (Thruster2PWM != other.Thruster2PWM) return false;
      if (Thruster3PWM != other.Thruster3PWM) return false;
      if (Thruster4PWM != other.Thruster4PWM) return false;
      if (Thruster5PWM != other.Thruster5PWM) return false;
      if (Thruster6PWM != other.Thruster6PWM) return false;
      if (Thruster7PWM != other.Thruster7PWM) return false;
      if (Servo0PWM != other.Servo0PWM) return false;
      if (Servo1PWM != other.Servo1PWM) return false;
      if (Servo2PWM != other.Servo2PWM) return false;
      if (LightPWM != other.LightPWM) return false;
      if (ClawState != other.ClawState) return false;
      if (Result != other.Result) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Thruster0PWM != 0) hash ^= Thruster0PWM.GetHashCode();
      if (Thruster1PWM != 0) hash ^= Thruster1PWM.GetHashCode();
      if (Thruster2PWM != 0) hash ^= Thruster2PWM.GetHashCode();
      if (Thruster3PWM != 0) hash ^= Thruster3PWM.GetHashCode();
      if (Thruster4PWM != 0) hash ^= Thruster4PWM.GetHashCode();
      if (Thruster5PWM != 0) hash ^= Thruster5PWM.GetHashCode();
      if (Thruster6PWM != 0) hash ^= Thruster6PWM.GetHashCode();
      if (Thruster7PWM != 0) hash ^= Thruster7PWM.GetHashCode();
      if (Servo0PWM != 0) hash ^= Servo0PWM.GetHashCode();
      if (Servo1PWM != 0) hash ^= Servo1PWM.GetHashCode();
      if (Servo2PWM != 0) hash ^= Servo2PWM.GetHashCode();
      if (LightPWM != 0) hash ^= LightPWM.GetHashCode();
      if (ClawState != 0) hash ^= ClawState.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Thruster0PWM != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Thruster0PWM);
      }
      if (Thruster1PWM != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Thruster1PWM);
      }
      if (Thruster2PWM != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Thruster2PWM);
      }
      if (Thruster3PWM != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Thruster3PWM);
      }
      if (Thruster4PWM != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Thruster4PWM);
      }
      if (Thruster5PWM != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Thruster5PWM);
      }
      if (Thruster6PWM != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Thruster6PWM);
      }
      if (Thruster7PWM != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Thruster7PWM);
      }
      if (Servo0PWM != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Servo0PWM);
      }
      if (Servo1PWM != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Servo1PWM);
      }
      if (Servo2PWM != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Servo2PWM);
      }
      if (LightPWM != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(LightPWM);
      }
      if (ClawState != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(ClawState);
      }
      if (Result != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Result);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Thruster0PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster0PWM);
      }
      if (Thruster1PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster1PWM);
      }
      if (Thruster2PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster2PWM);
      }
      if (Thruster3PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster3PWM);
      }
      if (Thruster4PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster4PWM);
      }
      if (Thruster5PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster5PWM);
      }
      if (Thruster6PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster6PWM);
      }
      if (Thruster7PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Thruster7PWM);
      }
      if (Servo0PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Servo0PWM);
      }
      if (Servo1PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Servo1PWM);
      }
      if (Servo2PWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Servo2PWM);
      }
      if (LightPWM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LightPWM);
      }
      if (ClawState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClawState);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PollMessage other) {
      if (other == null) {
        return;
      }
      if (other.Thruster0PWM != 0) {
        Thruster0PWM = other.Thruster0PWM;
      }
      if (other.Thruster1PWM != 0) {
        Thruster1PWM = other.Thruster1PWM;
      }
      if (other.Thruster2PWM != 0) {
        Thruster2PWM = other.Thruster2PWM;
      }
      if (other.Thruster3PWM != 0) {
        Thruster3PWM = other.Thruster3PWM;
      }
      if (other.Thruster4PWM != 0) {
        Thruster4PWM = other.Thruster4PWM;
      }
      if (other.Thruster5PWM != 0) {
        Thruster5PWM = other.Thruster5PWM;
      }
      if (other.Thruster6PWM != 0) {
        Thruster6PWM = other.Thruster6PWM;
      }
      if (other.Thruster7PWM != 0) {
        Thruster7PWM = other.Thruster7PWM;
      }
      if (other.Servo0PWM != 0) {
        Servo0PWM = other.Servo0PWM;
      }
      if (other.Servo1PWM != 0) {
        Servo1PWM = other.Servo1PWM;
      }
      if (other.Servo2PWM != 0) {
        Servo2PWM = other.Servo2PWM;
      }
      if (other.LightPWM != 0) {
        LightPWM = other.LightPWM;
      }
      if (other.ClawState != 0) {
        ClawState = other.ClawState;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Thruster0PWM = input.ReadUInt32();
            break;
          }
          case 16: {
            Thruster1PWM = input.ReadUInt32();
            break;
          }
          case 24: {
            Thruster2PWM = input.ReadUInt32();
            break;
          }
          case 32: {
            Thruster3PWM = input.ReadUInt32();
            break;
          }
          case 40: {
            Thruster4PWM = input.ReadUInt32();
            break;
          }
          case 48: {
            Thruster5PWM = input.ReadUInt32();
            break;
          }
          case 56: {
            Thruster6PWM = input.ReadUInt32();
            break;
          }
          case 64: {
            Thruster7PWM = input.ReadUInt32();
            break;
          }
          case 72: {
            Servo0PWM = input.ReadUInt32();
            break;
          }
          case 80: {
            Servo1PWM = input.ReadUInt32();
            break;
          }
          case 88: {
            Servo2PWM = input.ReadUInt32();
            break;
          }
          case 96: {
            LightPWM = input.ReadUInt32();
            break;
          }
          case 104: {
            ClawState = input.ReadUInt32();
            break;
          }
          case 112: {
            result_ = (global::KR23.KelpieResult) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutgoingMessage : pb::IMessage<OutgoingMessage> {
    private static readonly pb::MessageParser<OutgoingMessage> _parser = new pb::MessageParser<OutgoingMessage>(() => new OutgoingMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutgoingMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KR23.PicomsDataTypesKR23Proto3Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutgoingMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutgoingMessage(OutgoingMessage other) : this() {
      ThrusterCommand = other.thrusterCommand_ != null ? other.ThrusterCommand.Clone() : null;
      AttachmentCommand = other.attachmentCommand_ != null ? other.AttachmentCommand.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutgoingMessage Clone() {
      return new OutgoingMessage(this);
    }

    /// <summary>Field number for the "thrusterCommand" field.</summary>
    public const int ThrusterCommandFieldNumber = 1;
    private global::KR23.ThrusterCommand thrusterCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.ThrusterCommand ThrusterCommand {
      get { return thrusterCommand_; }
      set {
        thrusterCommand_ = value;
      }
    }

    /// <summary>Field number for the "attachmentCommand" field.</summary>
    public const int AttachmentCommandFieldNumber = 2;
    private global::KR23.AttachmentCommand attachmentCommand_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.AttachmentCommand AttachmentCommand {
      get { return attachmentCommand_; }
      set {
        attachmentCommand_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutgoingMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutgoingMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ThrusterCommand, other.ThrusterCommand)) return false;
      if (!object.Equals(AttachmentCommand, other.AttachmentCommand)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (thrusterCommand_ != null) hash ^= ThrusterCommand.GetHashCode();
      if (attachmentCommand_ != null) hash ^= AttachmentCommand.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (thrusterCommand_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ThrusterCommand);
      }
      if (attachmentCommand_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AttachmentCommand);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (thrusterCommand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ThrusterCommand);
      }
      if (attachmentCommand_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachmentCommand);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutgoingMessage other) {
      if (other == null) {
        return;
      }
      if (other.thrusterCommand_ != null) {
        if (thrusterCommand_ == null) {
          thrusterCommand_ = new global::KR23.ThrusterCommand();
        }
        ThrusterCommand.MergeFrom(other.ThrusterCommand);
      }
      if (other.attachmentCommand_ != null) {
        if (attachmentCommand_ == null) {
          attachmentCommand_ = new global::KR23.AttachmentCommand();
        }
        AttachmentCommand.MergeFrom(other.AttachmentCommand);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (thrusterCommand_ == null) {
              thrusterCommand_ = new global::KR23.ThrusterCommand();
            }
            input.ReadMessage(thrusterCommand_);
            break;
          }
          case 18: {
            if (attachmentCommand_ == null) {
              attachmentCommand_ = new global::KR23.AttachmentCommand();
            }
            input.ReadMessage(attachmentCommand_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IncomingMessage : pb::IMessage<IncomingMessage> {
    private static readonly pb::MessageParser<IncomingMessage> _parser = new pb::MessageParser<IncomingMessage>(() => new IncomingMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncomingMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KR23.PicomsDataTypesKR23Proto3Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingMessage(IncomingMessage other) : this() {
      SensorsData = other.sensorsData_ != null ? other.SensorsData.Clone() : null;
      SafetyData = other.safetyData_ != null ? other.SafetyData.Clone() : null;
      PollMessage = other.pollMessage_ != null ? other.PollMessage.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncomingMessage Clone() {
      return new IncomingMessage(this);
    }

    /// <summary>Field number for the "sensorsData" field.</summary>
    public const int SensorsDataFieldNumber = 1;
    private global::KR23.SensorsData sensorsData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.SensorsData SensorsData {
      get { return sensorsData_; }
      set {
        sensorsData_ = value;
      }
    }

    /// <summary>Field number for the "safetyData" field.</summary>
    public const int SafetyDataFieldNumber = 2;
    private global::KR23.SafetyData safetyData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.SafetyData SafetyData {
      get { return safetyData_; }
      set {
        safetyData_ = value;
      }
    }

    /// <summary>Field number for the "pollMessage" field.</summary>
    public const int PollMessageFieldNumber = 3;
    private global::KR23.PollMessage pollMessage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KR23.PollMessage PollMessage {
      get { return pollMessage_; }
      set {
        pollMessage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncomingMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncomingMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SensorsData, other.SensorsData)) return false;
      if (!object.Equals(SafetyData, other.SafetyData)) return false;
      if (!object.Equals(PollMessage, other.PollMessage)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sensorsData_ != null) hash ^= SensorsData.GetHashCode();
      if (safetyData_ != null) hash ^= SafetyData.GetHashCode();
      if (pollMessage_ != null) hash ^= PollMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sensorsData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SensorsData);
      }
      if (safetyData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SafetyData);
      }
      if (pollMessage_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PollMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sensorsData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SensorsData);
      }
      if (safetyData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SafetyData);
      }
      if (pollMessage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PollMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncomingMessage other) {
      if (other == null) {
        return;
      }
      if (other.sensorsData_ != null) {
        if (sensorsData_ == null) {
          sensorsData_ = new global::KR23.SensorsData();
        }
        SensorsData.MergeFrom(other.SensorsData);
      }
      if (other.safetyData_ != null) {
        if (safetyData_ == null) {
          safetyData_ = new global::KR23.SafetyData();
        }
        SafetyData.MergeFrom(other.SafetyData);
      }
      if (other.pollMessage_ != null) {
        if (pollMessage_ == null) {
          pollMessage_ = new global::KR23.PollMessage();
        }
        PollMessage.MergeFrom(other.PollMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (sensorsData_ == null) {
              sensorsData_ = new global::KR23.SensorsData();
            }
            input.ReadMessage(sensorsData_);
            break;
          }
          case 18: {
            if (safetyData_ == null) {
              safetyData_ = new global::KR23.SafetyData();
            }
            input.ReadMessage(safetyData_);
            break;
          }
          case 26: {
            if (pollMessage_ == null) {
              pollMessage_ = new global::KR23.PollMessage();
            }
            input.ReadMessage(pollMessage_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
